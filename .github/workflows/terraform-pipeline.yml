name: Implement Build Steps in GitHub Actions Workflow for Terraform Plan and Apply
'on':
  push:
    branches:
      - main
      - feature*
  pull_request:
    types:
      - opened
      - synchronize
env:
  AWS_REGION: eu-west-1
  AWS_ACCESS_KEY: '${{ secrets.AWS_ACCESS_KEY_ID }}'
  AWS_SECRET_ACCESS_KEY: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
jobs:
  Build-Infra:

    name: Terraform CICD
    runs-on: self-hosted
    permissions:
      contents: read
      issues: write

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Run TFSec scan
        id: tfsec-scan
        run: |
          tfsec --format json --out tfsec-results.json

      - name: Check TFSec results
        id: tfsec-results
        run: |
          CRITICAL=$(jq '[.results[] | select(.severity == "CRITICAL")] | length' tfsec-results.json)
          HIGH=$(jq '[.results[] | select(.severity == "HIGH")] | length' tfsec-results.json)
          MEDIUM=$(jq '[.results[] | select(.severity == "MEDIUM")] | length' tfsec-results.json)
          LOW=$(jq '[.results[] | select(.severity == "LOW")] | length' tfsec-results.json)

          echo "CRITICAL: $CRITICAL"
          echo "HIGH: $HIGH"
          echo "MEDIUM: $MEDIUM"
          echo "LOW: $LOW"

          if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
            echo "TFSec detected critical or high-severity issues"
            # Trigger Slack notification for critical/high-severity issues
            curl -X POST -H 'Content-type: application/json' --data '{"text":"TFSec detected critical or high-severity issues in the Terraform codebase."}' $SLACK_WEBHOOK_URL
            exit 1
          fi

      - name: Upload TFSec results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: tfsec-results
          path: tfsec-results.json

      - name: Report TFSec results
        if: always()
        run: |
          jq -r '.results[] | "\(.severity): \(.description)"' tfsec-results.json

      # Setting up Docker    
      - name: Verify Docker Group
        run: |
          sudo usermod -aG docker $USER
          newgrp docker
          sudo chmod 666 /var/run/docker.sock
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Checkout
        uses: actions/checkout@v2
      - name: tfsec
        uses: aquasecurity/tfsec-action@v1.0.0
          
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Set AWS Credentials
        run: >
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >>
          $GITHUB_ENV

              echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >>
              $GITHUB_ENV
          - name: Terraform Init
            id: init
            run: terraform init
            working-directory: ./TerraformScripts
          - name: Terraform Plan
            id: plan
            if: 'github.ref_name == ''main'' || startsWith(github.ref_name, ''feature/'')'
            run: terraform plan -out saved_plan
            working-directory: ./TerraformScripts
          - name: Manual Approval
            if: >-
              github.ref_name == 'main' && (github.event_name == 'push' ||
              github.event_name == 'pull_request')
            uses: trstringer/manual-approval@v1
            with:
              approvers: Mitchxxx
              secret: '${{ secrets.GITHUB_TOKEN }}'
              minimum-approvals: 1
              issue-title: Manual approval required for workflow run
              issue-body: >
                Workflow is pending manual review.

                URL: ${{ github.server_url }}/${{ github.repository
                }}/actions/runs/${{ github.run_id }}

                Required approvers: [Mitchxxx]

                Respond "approved", "approve", "lgtm", "yes" to continue workflow or
                "denied", "deny", "no" to cancel.
          - name: Terraform Apply
            id: apply
            if: >-
              github.ref_name == 'main' && (github.event_name == 'push' ||
              steps.plan.outputs.approved == 'true')
            run: terraform apply --auto-approve saved_plan
            working-directory: ./TerraformScripts
