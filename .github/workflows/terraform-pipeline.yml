name: Implement Build Steps in GitHub Actions Workflow for Terraform Plan and Apply
'on':
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select the Environment for Deployment'
        required: true
        default: 'sandbox'
        type: choice
        options:
          - sandbox
          - staging
          - production

env:
  AWS_REGION: us-east-1
  
jobs:
    Build-Infra:
        name: Terraform CICD
        runs-on: self-hosted
        permissions:
          contents: read
          issues: write
          
        steps:
        # This step scans the terraform codes to identify security issues and best practices violations.
          - name: Clone repo
            uses: actions/checkout@master

          - name: Set up Docker
            uses: byloth/docker-setup-action@v1

          - name: Checkout
            uses: actions/checkout@v2

          - name: Set up Node.js
            uses: actions/setup-node@v4
            with:
              node-version: '18'

          - name: Install unzip
            run: sudo apt-get install unzip -y

          - name: Install tfsec
            run: curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash

          - name: Set up Terraform
            uses: hashicorp/setup-terraform@v2

        # This Step moves the AWS credentials to the Github Environment So Terraform Can Automatically Identify the Provider is AWS
          - name: Set AWS Credentials
            run: |
                echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
                echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV

          # This step verifies the terraform.tfvar file for the environment
          - name: Set Environment
            id: set-environment
            run: |
              if [[ "${{ github.ref_name }}" == "main" ]]; then
                echo "TF_VAR_environment=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
              elif [[ "${{ github.ref_name }}" == feature/* ]]; then
                echo "TF_VAR_environment=sandbox" >> $GITHUB_ENV
              fi
            shell: bash

          - name: Terraform Init
            id: init
            run: terraform init

          # This Step is only executed if the name of the Branch is either Main or starts with feature
          - name: Terraform Plan
            id: plan
            if: 'github.ref_name == ''main'' || startsWith(github.ref_name, ''feature/'')'
            run: terraform plan -var-file="environments/${{ env.TF_VAR_environment }}/${{ env.TF_VAR_environment }}.tfvars" -out saved_plan

        # This Step is executes tfsec to scan the terraform scripts for vulnerabilities, outputs the report in json format,
        # and closes the pipeline if there are any Critical or High errors detected.
          - name: Run tfsec for all severities
            run: |
              tfsec --no-colour  -s -f=json > tfsec-results.json
              tfsec_output=$(cat tfsec-results.json)
              echo "All tfsec results:"
              echo "$tfsec_output"
              
              # Check if there are critical or high severity issues
              echo "Checking for MEDIUM or LOW severity issues..."
              if [[ $(jq '.results[] | select(.severity == "LOW" or .severity == "MEDIUM")' <<< "$tfsec_output") ]]; then
                echo "Warning: MEDIUM or LOW severity issues found."
              else
                echo "No MEDIUM or LOW severity issues found."
              fi

              echo "Checking for CRITICAL or HIGH severity issues..."
              if [[ $(jq '.results[] | select(.severity == "CRITICAL" or .severity == "HIGH")' <<< "$tfsec_output") ]]; then
                echo "CRITICAL or HIGH severity issues found. Failing the job."
                MESSAGE="Critical or High severity issues detected in terraform scripts"
                curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"$MESSAGE\"}" ${{ secrets.SLACK_WEBHOOK_URL }}
                exit 1
              else
                echo "No CRITICAL or HIGH severity issues found."
              fi
            
        # This Step Requires Approval from owner or maintainer whom has the required Github token to proceed further
          - name: Manual Approval
            id: approval
            if: github.ref_name == 'main'
            uses: trstringer/manual-approval@v1
            with:
              approvers: Mitchxxx,uzukwujp

              secret: ${{ secrets.GITHUB_TOKEN }}
              minimum-approvals: 1
              issue-title: "Manual approval required for workflow run"
              issue-body: |
                Workflow is pending manual review.
                URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
                Required approvers: [Mitchxxx,uzukwujp]
                Respond "approved", "approve", "lgtm", "yes" to continue workflow or "denied", "deny", "no" to cancel.

          - name: Terraform Apply
            id: apply
            if: github.ref_name == 'main' && steps.approval.outputs.approved == 'true'
            run: terraform apply --auto-approve saved_plan

            # This Step sends a Notification to the pod-b-github-actions channel in Slack if any Job fails in the Main Branch
          - name: Slack Notification
            id: slack
            if: failure() && github.ref_name == 'main'
            uses: slackapi/slack-github-action@v1.26.0
            with:
              payload: |
                {
                  "text": "GitHub Action build result: ${{ job.status }}",
                  "blocks": [
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "GitHub Action build failed in repository ${{ github.repository }}\n\nBranch: ${{ github.ref }}\nCommit: ${{ github.sha }}\nFailed Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                      }
                    }
                  ]
                }
            env:
              SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
              SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK



